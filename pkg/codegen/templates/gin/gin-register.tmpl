// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
BaseURL string
Middlewares []gin.HandlerFunc
ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
{{if .}}
    errorHandler := options.ErrorHandler

    if errorHandler == nil {
    errorHandler = func(c *gin.Context, err error, statusCode int) {
    c.JSON(statusCode, gin.H{"msg": err.Error()})
    }
    }

    wrapper := ServerInterfaceWrapper{
    Handler: si,
    ErrorHandler: errorHandler,
    }
{{end}}

{{range .}}
    var cHandlers{{.OperationId}} = options.Middlewares
    {{- if .SecurityDefinitions}}
        cHandlers{{.OperationId}} = append([]gin.HandlerFunc{
        func(c *gin.Context) {
        {{- range .SecurityDefinitions}}
            c.Set({{.ProviderName | ucFirst}}Scopes, {{toStringArray .Scopes}})
        {{- end}}
        },
    }, cHandlers{{.OperationId}}...)
    {{- end}}
    cHandlers{{.OperationId}} = append(cHandlers{{.OperationId}}, wrapper.{{.OperationId}})
    router.{{.Method }}(options.BaseURL+"{{.Path | swaggerUriToGinUri }}", cHandlers{{.OperationId}}...)
{{end}}
return router
}
