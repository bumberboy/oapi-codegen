// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
    BaseURL string
    Middlewares []MiddlewareFunc
    ErrorHandler func(*fiber.Ctx, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) fiber.Router {
  return RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) fiber.Router {
    {{if .}}
    errorHandler := options.ErrorHandler

    if errorHandler == nil {
        errorHandler = func(c *fiber.Ctx, err error, statusCode int) {
            c.JSON(map[string]string{"error": err.Error()})
        }
    }

    wrapper := ServerInterfaceWrapper{
        Handler: si,
        HandlerMiddlewares: options.Middlewares,
        ErrorHandler: errorHandler,
    }
    {{end}}
    {{range .}}
    router.{{ .Method | title }}(options.BaseURL+"{{.Path | swaggerUriToGinUri }}", wrapper.{{.OperationId}})
    {{end}}
    return router
}
