func NewStrictHandler(ssi StrictServerInterface, auth server.GinHandlerWithErr, middlewares ...server.StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, auth: auth, middlewares: middlewares}
}

type strictHandler struct {
    ssi         StrictServerInterface
    auth        server.GinHandlerWithErr
    middlewares []server.StrictMiddlewareFunc
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx *gin.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) {
        var request {{$opid | ucFirst}}RequestObject

        {{ if .SecurityDefinitions -}}
        // ===== AUTH CHECK =====
        {{- range .SecurityDefinitions}}
        ctx.Set({{.ProviderName | ucFirst}}Scopes, {{toStringArray .Scopes}})
        {{- end}}
        if err := sh.auth(ctx); err != nil {
            // ctx would have been filled by auth handlers
            return
        }

        identity, exists := ctx.Get("id")
        if !exists {
            ctx.Status(http.StatusUnauthorized)
            ctx.Error(errors.New("missing identity"))
            return
        }
        request.Token = *identity.(*model.Identity)
        // ===== AUTH END =====
        {{end -}}

        {{range .PathParams -}}
            {{$varName := .GoVariableName -}}
            request.{{$varName | ucFirst}} = {{$varName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = ctx.ContentType()
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(ctx.GetHeader("Content-Type"), "{{.ContentType}}") { {{end}}
                {{if eq .NameTag "JSON" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.ShouldBind(&body); err != nil {
                        ctx.Status(http.StatusBadRequest)
                        ctx.Error(err)
                        return
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    if err := ctx.Request.ParseForm(); err != nil {
                        ctx.Error(err)
                        return
                    }
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
                        ctx.Error(err)
                        return
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Multipart" -}}
                    if reader, err := ctx.Request.MultipartReader(); err == nil {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                    } else {
                        ctx.Error(err)
                        return
                    }
                {{else if eq .NameTag "Text" -}}
                    data, err := io.ReadAll(ctx.Request.Body)
                    if err != nil {
                        ctx.Error(err)
                        return
                    }
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = ctx.Request.Body
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
            return sh.ssi.{{.OperationId}}(ctx, request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }

        response, err := handler(ctx, request)

        if err != nil {
            ctx.Error(err)
        } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            if err := validResponse.Visit{{$opid}}Response(ctx.Writer); err != nil {
                ctx.Error(err)
            }
        } else if response != nil {
            ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
        }
    }
{{end}}
