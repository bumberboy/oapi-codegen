// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package server

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gofiber/fiber/v2"
)

// Defines values for GetWithContentTypeParamsContentType.
const (
	Json GetWithContentTypeParamsContentType = "json"
	Text GetWithContentTypeParamsContentType = "text"
)

// EveryTypeOptional defines model for EveryTypeOptional.
type EveryTypeOptional struct {
	ArrayInlineField     *[]int              `json:"array_inline_field,omitempty"`
	ArrayReferencedField *[]SomeObject       `json:"array_referenced_field,omitempty"`
	BoolField            *bool               `json:"bool_field,omitempty"`
	ByteField            *[]byte             `json:"byte_field,omitempty"`
	DateField            *openapi_types.Date `json:"date_field,omitempty"`
	DateTimeField        *time.Time          `json:"date_time_field,omitempty"`
	DoubleField          *float64            `json:"double_field,omitempty"`
	FloatField           *float32            `json:"float_field,omitempty"`
	InlineObjectField    *struct {
		Name   string `json:"name"`
		Number int    `json:"number"`
	} `json:"inline_object_field,omitempty"`
	Int32Field      *int32      `json:"int32_field,omitempty"`
	Int64Field      *int64      `json:"int64_field,omitempty"`
	IntField        *int        `json:"int_field,omitempty"`
	NumberField     *float32    `json:"number_field,omitempty"`
	ReferencedField *SomeObject `json:"referenced_field,omitempty"`
	StringField     *string     `json:"string_field,omitempty"`
}

// EveryTypeRequired defines model for EveryTypeRequired.
type EveryTypeRequired struct {
	ArrayInlineField     []int                `json:"array_inline_field"`
	ArrayReferencedField []SomeObject         `json:"array_referenced_field"`
	BoolField            bool                 `json:"bool_field"`
	ByteField            []byte               `json:"byte_field"`
	DateField            openapi_types.Date   `json:"date_field"`
	DateTimeField        time.Time            `json:"date_time_field"`
	DoubleField          float64              `json:"double_field"`
	EmailField           *openapi_types.Email `json:"email_field,omitempty"`
	FloatField           float32              `json:"float_field"`
	InlineObjectField    struct {
		Name   string `json:"name"`
		Number int    `json:"number"`
	} `json:"inline_object_field"`
	Int32Field      int32      `json:"int32_field"`
	Int64Field      int64      `json:"int64_field"`
	IntField        int        `json:"int_field"`
	NumberField     float32    `json:"number_field"`
	ReferencedField SomeObject `json:"referenced_field"`
	StringField     string     `json:"string_field"`
}

// ReservedKeyword defines model for ReservedKeyword.
type ReservedKeyword struct {
	Channel *string `json:"channel,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	Name  string  `json:"name"`
	Value float32 `json:"value"`
}

// SomeObject defines model for some_object.
type SomeObject struct {
	Name string `json:"name"`
}

// Argument defines model for argument.
type Argument = string

// ResponseWithReference defines model for ResponseWithReference.
type ResponseWithReference = SomeObject

// SimpleResponse defines model for SimpleResponse.
type SimpleResponse struct {
	Name string `json:"name"`
}

// GetWithArgsParams defines parameters for GetWithArgs.
type GetWithArgsParams struct {
	// OptionalArgument An optional query argument
	OptionalArgument *int64 `form:"optional_argument,omitempty" json:"optional_argument,omitempty"`

	// RequiredArgument An optional query argument
	RequiredArgument int64 `form:"required_argument" json:"required_argument"`

	// HeaderArgument An optional query argument
	HeaderArgument *int32 `json:"header_argument,omitempty"`
}

// GetWithContentTypeParamsContentType defines parameters for GetWithContentType.
type GetWithContentTypeParamsContentType string

// CreateResource2Params defines parameters for CreateResource2.
type CreateResource2Params struct {
	// InlineQueryArgument Some query argument
	InlineQueryArgument *int `form:"inline_query_argument,omitempty" json:"inline_query_argument,omitempty"`
}

// UpdateResource3JSONBody defines parameters for UpdateResource3.
type UpdateResource3JSONBody struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = EveryTypeRequired

// CreateResource2JSONRequestBody defines body for CreateResource2 for application/json ContentType.
type CreateResource2JSONRequestBody = Resource

// UpdateResource3JSONRequestBody defines body for UpdateResource3 for application/json ContentType.
type UpdateResource3JSONRequestBody UpdateResource3JSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get every type optional
	// (GET /every-type-optional)
	GetEveryTypeOptional(ctx *fiber.Ctx) error
	// Get resource via simple path
	// (GET /get-simple)
	GetSimple(ctx *fiber.Ctx) error
	// Getter with referenced parameter and referenced response
	// (GET /get-with-args)
	GetWithArgs(ctx *fiber.Ctx, params GetWithArgsParams) error
	// Getter with referenced parameter and referenced response
	// (GET /get-with-references/{global_argument}/{argument})
	GetWithReferences(ctx *fiber.Ctx, globalArgument int64, argument Argument) error
	// Get an object by ID
	// (GET /get-with-type/{content_type})
	GetWithContentType(ctx *fiber.Ctx, contentType GetWithContentTypeParamsContentType) error
	// get with reserved keyword
	// (GET /reserved-keyword)
	GetReservedKeyword(ctx *fiber.Ctx) error
	// Create a resource
	// (POST /resource/{argument})
	CreateResource(ctx *fiber.Ctx, argument Argument) error
	// Create a resource with inline parameter
	// (POST /resource2/{inline_argument})
	CreateResource2(ctx *fiber.Ctx, inlineArgument int, params CreateResource2Params) error
	// Update a resource with inline body. The parameter name is a reserved
	// keyword, so make sure that gets prefixed to avoid syntax errors
	// (PUT /resource3/{fallthrough})
	UpdateResource3(ctx *fiber.Ctx, pFallthrough int) error
	// get response with reference
	// (GET /response-with-reference)
	GetResponseWithReference(ctx *fiber.Ctx) error
}

// ServerInterfaceWrapper converts fiber contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*fiber.Ctx, error, int)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetEveryTypeOptional converts fiber context to params.
func (w *ServerInterfaceWrapper) GetEveryTypeOptional(ctx *fiber.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEveryTypeOptional(ctx)
	return err
}

// GetSimple converts fiber context to params.
func (w *ServerInterfaceWrapper) GetSimple(ctx *fiber.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimple(ctx)
	return err
}

// GetWithArgs converts fiber context to params.
func (w *ServerInterfaceWrapper) GetWithArgs(ctx *fiber.Ctx) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWithArgsParams

	if err := ctx.QueryParser(&params); err != nil {
		return fiber.NewError(http.StatusBadRequest, "Error unmarshalling query params")
	}

	headers := ctx.GetReqHeaders()
	// ------------- Optional header parameter "header_argument" -------------
	if headerVal, found := headers[http.CanonicalHeaderKey("header_argument")]; found {
		var HeaderArgument int32

		err = runtime.BindStyledParameterWithLocation("simple", false, "header_argument", runtime.ParamLocationHeader, headerVal, &HeaderArgument)
		if err != nil {
			return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header_argument: %s", err))
		}

		params.HeaderArgument = &HeaderArgument
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWithArgs(ctx, params)
	return err
}

// GetWithReferences converts fiber context to params.
func (w *ServerInterfaceWrapper) GetWithReferences(ctx *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "global_argument" -------------
	var globalArgument int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "global_argument", runtime.ParamLocationPath, ctx.Params("global_argument"), &globalArgument)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter global_argument: %s", err))
	}

	// ------------- Path parameter "argument" -------------
	var argument Argument

	err = runtime.BindStyledParameterWithLocation("simple", false, "argument", runtime.ParamLocationPath, ctx.Params("argument"), &argument)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter argument: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWithReferences(ctx, globalArgument, argument)
	return err
}

// GetWithContentType converts fiber context to params.
func (w *ServerInterfaceWrapper) GetWithContentType(ctx *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "content_type" -------------
	var contentType GetWithContentTypeParamsContentType

	err = runtime.BindStyledParameterWithLocation("simple", false, "content_type", runtime.ParamLocationPath, ctx.Params("content_type"), &contentType)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter content_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWithContentType(ctx, contentType)
	return err
}

// GetReservedKeyword converts fiber context to params.
func (w *ServerInterfaceWrapper) GetReservedKeyword(ctx *fiber.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReservedKeyword(ctx)
	return err
}

// CreateResource converts fiber context to params.
func (w *ServerInterfaceWrapper) CreateResource(ctx *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "argument" -------------
	var argument Argument

	err = runtime.BindStyledParameterWithLocation("simple", false, "argument", runtime.ParamLocationPath, ctx.Params("argument"), &argument)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter argument: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateResource(ctx, argument)
	return err
}

// CreateResource2 converts fiber context to params.
func (w *ServerInterfaceWrapper) CreateResource2(ctx *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "inline_argument" -------------
	var inlineArgument int

	err = runtime.BindStyledParameterWithLocation("simple", false, "inline_argument", runtime.ParamLocationPath, ctx.Params("inline_argument"), &inlineArgument)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inline_argument: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateResource2Params

	if err := ctx.QueryParser(&params); err != nil {
		return fiber.NewError(http.StatusBadRequest, "Error unmarshalling query params")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateResource2(ctx, inlineArgument, params)
	return err
}

// UpdateResource3 converts fiber context to params.
func (w *ServerInterfaceWrapper) UpdateResource3(ctx *fiber.Ctx) error {
	var err error
	// ------------- Path parameter "fallthrough" -------------
	var pFallthrough int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fallthrough", runtime.ParamLocationPath, ctx.Params("fallthrough"), &pFallthrough)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fallthrough: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateResource3(ctx, pFallthrough)
	return err
}

// GetResponseWithReference converts fiber context to params.
func (w *ServerInterfaceWrapper) GetResponseWithReference(ctx *fiber.Ctx) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResponseWithReference(ctx)
	return err
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*fiber.Ctx, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) fiber.Router {
	return RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) fiber.Router {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *fiber.Ctx, err error, statusCode int) {
			c.JSON(map[string]string{"error": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.Get(options.BaseURL+"/every-type-optional", wrapper.GetEveryTypeOptional)

	router.Get(options.BaseURL+"/get-simple", wrapper.GetSimple)

	router.Get(options.BaseURL+"/get-with-args", wrapper.GetWithArgs)

	router.Get(options.BaseURL+"/get-with-references/:global_argument/:argument", wrapper.GetWithReferences)

	router.Get(options.BaseURL+"/get-with-type/:content_type", wrapper.GetWithContentType)

	router.Get(options.BaseURL+"/reserved-keyword", wrapper.GetReservedKeyword)

	router.Post(options.BaseURL+"/resource/:argument", wrapper.CreateResource)

	router.Post(options.BaseURL+"/resource2/:inline_argument", wrapper.CreateResource2)

	router.Put(options.BaseURL+"/resource3/:fallthrough", wrapper.UpdateResource3)

	router.Get(options.BaseURL+"/response-with-reference", wrapper.GetResponseWithReference)

	return router
}

type ResponseWithReferenceJSONResponse SomeObject

type SimpleResponseJSONResponse struct {
	Name string `json:"name"`
}

type GetEveryTypeOptionalRequestObject struct {
}

type GetEveryTypeOptionalResponseObject interface {
	VisitGetEveryTypeOptionalResponse(c *fiber.Ctx) error
}

type GetEveryTypeOptional200JSONResponse EveryTypeOptional

func (response GetEveryTypeOptional200JSONResponse) VisitGetEveryTypeOptionalResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetSimpleRequestObject struct {
}

type GetSimpleResponseObject interface {
	VisitGetSimpleResponse(c *fiber.Ctx) error
}

type GetSimple200JSONResponse SomeObject

func (response GetSimple200JSONResponse) VisitGetSimpleResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetWithArgsRequestObject struct {
	Params GetWithArgsParams
}

type GetWithArgsResponseObject interface {
	VisitGetWithArgsResponse(c *fiber.Ctx) error
}

type GetWithArgs200JSONResponse struct{ SimpleResponseJSONResponse }

func (response GetWithArgs200JSONResponse) VisitGetWithArgsResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetWithReferencesRequestObject struct {
	GlobalArgument int64    `json:"global_argument"`
	Argument       Argument `json:"argument"`
}

type GetWithReferencesResponseObject interface {
	VisitGetWithReferencesResponse(c *fiber.Ctx) error
}

type GetWithReferences200JSONResponse struct{ SimpleResponseJSONResponse }

func (response GetWithReferences200JSONResponse) VisitGetWithReferencesResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetWithContentTypeRequestObject struct {
	ContentType GetWithContentTypeParamsContentType `json:"content_type"`
}

type GetWithContentTypeResponseObject interface {
	VisitGetWithContentTypeResponse(c *fiber.Ctx) error
}

type GetWithContentType200JSONResponse SomeObject

func (response GetWithContentType200JSONResponse) VisitGetWithContentTypeResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetWithContentType200TextResponse string

func (response GetWithContentType200TextResponse) VisitGetWithContentTypeResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "text/plain")

	return c.SendString(string(response))
}

type GetReservedKeywordRequestObject struct {
}

type GetReservedKeywordResponseObject interface {
	VisitGetReservedKeywordResponse(c *fiber.Ctx) error
}

type GetReservedKeyword200JSONResponse ReservedKeyword

func (response GetReservedKeyword200JSONResponse) VisitGetReservedKeywordResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type CreateResourceRequestObject struct {
	Argument Argument `json:"argument"`
	Body     *CreateResourceJSONRequestBody
}

type CreateResourceResponseObject interface {
	VisitCreateResourceResponse(c *fiber.Ctx) error
}

type CreateResource200JSONResponse struct{ SimpleResponseJSONResponse }

func (response CreateResource200JSONResponse) VisitCreateResourceResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type CreateResource2RequestObject struct {
	InlineArgument int `json:"inline_argument"`
	Params         CreateResource2Params
	Body           *CreateResource2JSONRequestBody
}

type CreateResource2ResponseObject interface {
	VisitCreateResource2Response(c *fiber.Ctx) error
}

type CreateResource2200JSONResponse struct{ SimpleResponseJSONResponse }

func (response CreateResource2200JSONResponse) VisitCreateResource2Response(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type UpdateResource3RequestObject struct {
	PFallthrough int `json:"fallthrough"`
	Body         *UpdateResource3JSONRequestBody
}

type UpdateResource3ResponseObject interface {
	VisitUpdateResource3Response(c *fiber.Ctx) error
}

type UpdateResource3200JSONResponse struct{ SimpleResponseJSONResponse }

func (response UpdateResource3200JSONResponse) VisitUpdateResource3Response(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

type GetResponseWithReferenceRequestObject struct {
}

type GetResponseWithReferenceResponseObject interface {
	VisitGetResponseWithReferenceResponse(c *fiber.Ctx) error
}

type GetResponseWithReference200JSONResponse struct {
	ResponseWithReferenceJSONResponse
}

func (response GetResponseWithReference200JSONResponse) VisitGetResponseWithReferenceResponse(c *fiber.Ctx) error {
	c.Set("Content-Type", "application/json")

	return c.JSON(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// get every type optional
	// (GET /every-type-optional)
	GetEveryTypeOptional(ctx context.Context, request GetEveryTypeOptionalRequestObject) (GetEveryTypeOptionalResponseObject, error)
	// Get resource via simple path
	// (GET /get-simple)
	GetSimple(ctx context.Context, request GetSimpleRequestObject) (GetSimpleResponseObject, error)
	// Getter with referenced parameter and referenced response
	// (GET /get-with-args)
	GetWithArgs(ctx context.Context, request GetWithArgsRequestObject) (GetWithArgsResponseObject, error)
	// Getter with referenced parameter and referenced response
	// (GET /get-with-references/{global_argument}/{argument})
	GetWithReferences(ctx context.Context, request GetWithReferencesRequestObject) (GetWithReferencesResponseObject, error)
	// Get an object by ID
	// (GET /get-with-type/{content_type})
	GetWithContentType(ctx context.Context, request GetWithContentTypeRequestObject) (GetWithContentTypeResponseObject, error)
	// get with reserved keyword
	// (GET /reserved-keyword)
	GetReservedKeyword(ctx context.Context, request GetReservedKeywordRequestObject) (GetReservedKeywordResponseObject, error)
	// Create a resource
	// (POST /resource/{argument})
	CreateResource(ctx context.Context, request CreateResourceRequestObject) (CreateResourceResponseObject, error)
	// Create a resource with inline parameter
	// (POST /resource2/{inline_argument})
	CreateResource2(ctx context.Context, request CreateResource2RequestObject) (CreateResource2ResponseObject, error)
	// Update a resource with inline body. The parameter name is a reserved
	// keyword, so make sure that gets prefixed to avoid syntax errors
	// (PUT /resource3/{fallthrough})
	UpdateResource3(ctx context.Context, request UpdateResource3RequestObject) (UpdateResource3ResponseObject, error)
	// get response with reference
	// (GET /response-with-reference)
	GetResponseWithReference(ctx context.Context, request GetResponseWithReferenceRequestObject) (GetResponseWithReferenceResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEveryTypeOptional operation middleware
func (sh *strictHandler) GetEveryTypeOptional(ctx *fiber.Ctx) error {
	var request GetEveryTypeOptionalRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetEveryTypeOptional(ctx.Context(), request.(GetEveryTypeOptionalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEveryTypeOptional")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEveryTypeOptionalResponseObject); ok {
		return validResponse.VisitGetEveryTypeOptionalResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSimple operation middleware
func (sh *strictHandler) GetSimple(ctx *fiber.Ctx) error {
	var request GetSimpleRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSimple(ctx.Context(), request.(GetSimpleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSimple")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSimpleResponseObject); ok {
		return validResponse.VisitGetSimpleResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetWithArgs operation middleware
func (sh *strictHandler) GetWithArgs(ctx *fiber.Ctx, params GetWithArgsParams) error {
	var request GetWithArgsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetWithArgs(ctx.Context(), request.(GetWithArgsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWithArgs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWithArgsResponseObject); ok {
		return validResponse.VisitGetWithArgsResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetWithReferences operation middleware
func (sh *strictHandler) GetWithReferences(ctx *fiber.Ctx, globalArgument int64, argument Argument) error {
	var request GetWithReferencesRequestObject

	request.GlobalArgument = globalArgument
	request.Argument = argument

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetWithReferences(ctx.Context(), request.(GetWithReferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWithReferences")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWithReferencesResponseObject); ok {
		return validResponse.VisitGetWithReferencesResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetWithContentType operation middleware
func (sh *strictHandler) GetWithContentType(ctx *fiber.Ctx, contentType GetWithContentTypeParamsContentType) error {
	var request GetWithContentTypeRequestObject

	request.ContentType = contentType

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetWithContentType(ctx.Context(), request.(GetWithContentTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWithContentType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWithContentTypeResponseObject); ok {
		return validResponse.VisitGetWithContentTypeResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetReservedKeyword operation middleware
func (sh *strictHandler) GetReservedKeyword(ctx *fiber.Ctx) error {
	var request GetReservedKeywordRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReservedKeyword(ctx.Context(), request.(GetReservedKeywordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReservedKeyword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetReservedKeywordResponseObject); ok {
		return validResponse.VisitGetReservedKeywordResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateResource operation middleware
func (sh *strictHandler) CreateResource(ctx *fiber.Ctx, argument Argument) error {
	var request CreateResourceRequestObject

	request.Argument = argument

	var body CreateResourceJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateResource(ctx.Context(), request.(CreateResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateResource")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateResourceResponseObject); ok {
		return validResponse.VisitCreateResourceResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateResource2 operation middleware
func (sh *strictHandler) CreateResource2(ctx *fiber.Ctx, inlineArgument int, params CreateResource2Params) error {
	var request CreateResource2RequestObject

	request.InlineArgument = inlineArgument
	request.Params = params

	var body CreateResource2JSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateResource2(ctx.Context(), request.(CreateResource2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateResource2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateResource2ResponseObject); ok {
		return validResponse.VisitCreateResource2Response(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateResource3 operation middleware
func (sh *strictHandler) UpdateResource3(ctx *fiber.Ctx, pFallthrough int) error {
	var request UpdateResource3RequestObject

	request.PFallthrough = pFallthrough

	var body UpdateResource3JSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateResource3(ctx.Context(), request.(UpdateResource3RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateResource3")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateResource3ResponseObject); ok {
		return validResponse.VisitUpdateResource3Response(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetResponseWithReference operation middleware
func (sh *strictHandler) GetResponseWithReference(ctx *fiber.Ctx) error {
	var request GetResponseWithReferenceRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetResponseWithReference(ctx.Context(), request.(GetResponseWithReferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResponseWithReference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetResponseWithReferenceResponseObject); ok {
		return validResponse.VisitGetResponseWithReferenceResponse(ctx)
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
